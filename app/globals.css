@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Light mode - enhanced contrast */
    --background: 0 0% 98%;
    --foreground: 222 47% 11%;

    --card: 0 0% 100%;
    --card-foreground: 222 47% 11%;

    --popover: 0 0% 100%;
    --popover-foreground: 222 47% 11%;

    --primary: 263 75% 50%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 94%;
    --secondary-foreground: 222 47% 11%;

    --muted: 210 40% 90%;
    --muted-foreground: 215 16% 30%;

    --accent: 263 75% 50%;
    --accent-foreground: 222 47% 11%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 80%;
    --input: 214.3 31.8% 80%;
    --ring: 263 75% 50%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222 47% 11%;
    --foreground: 210 40% 98%;

    --card: 222 47% 13%;
    --card-foreground: 210 40% 98%;

    --popover: 222 47% 11%;
    --popover-foreground: 210 40% 98%;

    --primary: 263 75% 63%;
    --primary-foreground: 210 40% 98%;

    --secondary: 217 33% 17%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217 33% 17%;
    --muted-foreground: 215 20% 65%;

    --accent: 263 75% 63%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217 33% 17%;
    --input: 217 33% 17%;
    --ring: 263 75% 63%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }

  /* Hide default cursor when custom cursor is active */
  @media (pointer: fine) {
    body:has(.custom-cursor-active) {
      cursor: none;
    }

    body:has(.custom-cursor-active) a,
    body:has(.custom-cursor-active) button,
    body:has(.custom-cursor-active) [role="button"],
    body:has(.custom-cursor-active) input,
    body:has(.custom-cursor-active) select,
    body:has(.custom-cursor-active) textarea,
    body:has(.custom-cursor-active) .gradient-card,
    body:has(.custom-cursor-active) .neon-button {
      cursor: none;
    }
  }
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  @apply bg-secondary/50;
}

::-webkit-scrollbar-thumb {
  @apply bg-primary/50 rounded-full;
}

::-webkit-scrollbar-thumb:hover {
  @apply bg-primary/70;
}

.scroll-section {
  scroll-margin-top: 80px;
}

/* Glowing text effect - adjusted for light mode */
.glow-text {
  text-shadow: 0 0 10px rgba(149, 76, 233, 0.5), 0 0 20px rgba(149, 76, 233, 0.3);
}

.light .glow-text {
  text-shadow: 0 0 8px rgba(124, 58, 237, 0.4), 0 0 16px rgba(124, 58, 237, 0.2);
}

.glow-border {
  box-shadow: 0 0 10px rgba(149, 76, 233, 0.3), 0 0 20px rgba(149, 76, 233, 0.2);
}

.light .glow-border {
  box-shadow: 0 0 8px rgba(124, 58, 237, 0.25), 0 0 16px rgba(124, 58, 237, 0.15);
}

/* Gradient backgrounds - adjusted for light mode */
.gradient-bg {
  background: linear-gradient(135deg, hsl(var(--background)), hsl(var(--secondary)));
}

.light .gradient-bg {
  background: linear-gradient(135deg, hsl(0 0% 100%), hsl(210 40% 96%));
}

.gradient-card {
  background: linear-gradient(135deg, hsl(var(--card)), hsl(var(--secondary)));
  border: 1px solid rgba(149, 76, 233, 0.1);
}

.light .gradient-card {
  background: linear-gradient(135deg, hsl(0 0% 100%), hsl(210 40% 98%));
  border: 1px solid rgba(124, 58, 237, 0.15);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.gradient-border {
  position: relative;
  border-radius: var(--radius);
  overflow: hidden;
}

.gradient-border::before {
  content: "";
  position: absolute;
  inset: 0;
  padding: 1px;
  border-radius: var(--radius);
  background: linear-gradient(45deg, rgba(149, 76, 233, 0.5), rgba(43, 74, 134, 0.5));
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: xor;
  mask-composite: exclude;
  pointer-events: none;
}

.light .gradient-border::before {
  background: linear-gradient(45deg, rgba(124, 58, 237, 0.6), rgba(79, 70, 229, 0.6));
}

/* Animated background */
.animated-bg {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  z-index: -1;
  opacity: 0.2;
  background: radial-gradient(circle at 20% 30%, rgba(149, 76, 233, 0.15) 0%, transparent 20%),
    radial-gradient(circle at 80% 70%, rgba(43, 74, 134, 0.15) 0%, transparent 20%);
}

.light .animated-bg {
  opacity: 0.15;
  background: radial-gradient(circle at 20% 30%, rgba(124, 58, 237, 0.2) 0%, transparent 20%),
    radial-gradient(circle at 80% 70%, rgba(79, 70, 229, 0.2) 0%, transparent 20%);
}

/* Experience timeline - adjusted for light mode */
.experience-item {
  @apply relative pl-8 pb-10;
}

.experience-item::before {
  content: "";
  @apply absolute left-0 top-2 h-4 w-4 rounded-full bg-primary;
}

.experience-item::after {
  content: "";
  position: absolute;
  left: 7px;
  top: 1.5rem;
  height: 100%;
  width: 0.125rem;
  background: linear-gradient(to bottom, hsl(var(--primary)), transparent);
}

.experience-item:last-child::after {
  @apply hidden;
}

/* Animated underline */
.animated-underline {
  position: relative;
  display: inline-block;
}

.animated-underline::after {
  content: "";
  position: absolute;
  width: 100%;
  transform: scaleX(0);
  height: 2px;
  bottom: -4px;
  left: 0;
  background: linear-gradient(90deg, hsl(var(--primary)), transparent);
  transform-origin: bottom right;
  transition: transform 0.3s ease-out;
}

.animated-underline:hover::after {
  transform: scaleX(1);
  transform-origin: bottom left;
}

/* Neon button - adjusted for light mode */
.neon-button {
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.neon-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: hsl(var(--primary));
  opacity: 0;
  transition: opacity 0.3s ease;
  z-index: -1;
}

.neon-button:hover::before {
  opacity: 0.2;
}

.neon-button:hover {
  box-shadow: 0 0 15px rgba(149, 76, 233, 0.5);
}

.light .neon-button:hover {
  box-shadow: 0 0 15px rgba(124, 58, 237, 0.4);
}

/* Floating animation */
@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
  100% {
    transform: translateY(0px);
  }
}

.floating {
  animation: float 4s ease-in-out infinite;
}

.floating-slow {
  animation: float 6s ease-in-out infinite;
}

.floating-fast {
  animation: float 3s ease-in-out infinite;
}

/* Typing animation */
@keyframes typing {
  from {
    width: 0;
  }
  to {
    width: 100%;
  }
}

@keyframes blink-caret {
  from,
  to {
    border-color: transparent;
  }
  50% {
    border-color: hsl(var(--primary));
  }
}

.typing-animation {
  display: inline-block;
  overflow: hidden;
  white-space: nowrap;
  border-right: 2px solid hsl(var(--primary));
  animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
}

/* Particle background */
.particles-container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
}

/* Skill progress bar - adjusted for light mode */
.skill-progress-bar {
  height: 6px;
  border-radius: 3px;
  background: hsl(var(--secondary));
  position: relative;
  overflow: hidden;
}

.light .skill-progress-bar {
  background: hsl(210 40% 90%);
}

.skill-progress-fill {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  background: linear-gradient(90deg, hsl(var(--primary)), hsl(var(--primary) / 0.7));
  border-radius: 3px;
  transition: width 1s ease;
}

.light .skill-progress-fill {
  background: linear-gradient(90deg, hsl(263 75% 50%), hsl(263 75% 50% / 0.8));
}

/* Project card - adjusted for light mode */
.project-card {
  position: relative;
  overflow: hidden;
  border-radius: var(--radius);
  transition: all 0.5s ease;
}

.project-card:hover {
  transform: translateY(-10px);
}

.project-card::before {
  content: "";
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, hsl(var(--primary)), transparent);
  z-index: -1;
  border-radius: calc(var(--radius) + 2px);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.project-card:hover::before {
  opacity: 1;
}

.light .project-card::before {
  background: linear-gradient(45deg, hsl(263 75% 50%), transparent);
}

.project-card-content {
  position: absolute;
  inset: 0;
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  padding: 1.5rem;
  background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.light .project-card-content {
  background: linear-gradient(to top, rgba(0, 0, 0, 0.7), transparent);
}

.project-card:hover .project-card-content {
  opacity: 1;
}

/* Achievement card - adjusted for light mode */
.achievement-card {
  position: relative;
  overflow: hidden;
  border-radius: var(--radius);
  transition: all 0.3s ease;
}

.achievement-card:hover {
  transform: translateY(-5px);
}

.achievement-card::before {
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(45deg, rgba(149, 76, 233, 0.1), transparent);
  opacity: 0;
  transition: opacity 0.3s ease;
}

.light .achievement-card::before {
  background: linear-gradient(45deg, rgba(124, 58, 237, 0.15), transparent);
}

.achievement-card:hover::before {
  opacity: 1;
}

.achievement-value {
  background: linear-gradient(90deg, hsl(var(--primary)), hsl(var(--primary) / 0.7));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.light .achievement-value {
  background: linear-gradient(90deg, hsl(263 75% 50%), hsl(263 75% 50% / 0.8));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

@keyframes countUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.count-animation {
  animation: countUp 0.5s ease-out forwards;
}

/* Blob animation */
@keyframes blob-animation {
  0% {
    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
  }
  50% {
    border-radius: 30% 60% 70% 40% / 50% 60% 30% 60%;
  }
  100% {
    border-radius: 60% 40% 30% 70% / 60% 30% 70% 40%;
  }
}

.blob {
  animation: blob-animation 8s ease-in-out infinite;
}

/* Reveal animation */
.reveal {
  position: relative;
  overflow: hidden;
}

.reveal::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: hsl(var(--background));
  transform: translateX(-100%);
  animation: reveal 1s ease forwards;
}

@keyframes reveal {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(100%);
  }
}

/* Noise texture */
.noise {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 9999;
  opacity: 0.03;
  pointer-events: none;
  background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 200 200' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
}

.light .noise {
  opacity: 0.02;
}

/* Light mode specific adjustments */
.light .text-muted-foreground {
  color: hsl(215 16% 30%);
}

.light .bg-primary\/10 {
  background-color: rgba(124, 58, 237, 0.15);
}

.light .text-primary {
  color: hsl(263 75% 45%);
}

.light .border-primary\/10 {
  border-color: rgba(124, 58, 237, 0.15);
}